"use strict";(self.webpackChunk_wcat_tools_docs=self.webpackChunk_wcat_tools_docs||[]).push([[468],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7905:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var r=n(3117),a=(n(7294),n(3905));const o={description:"Learn how to use the Command Line Interface to self host or create CI pipelines.",id:"cli",title:"Command Line Options",sidebar_label:"CLI"},i=void 0,s={unversionedId:"cli",id:"cli",title:"Command Line Options",description:"Learn how to use the Command Line Interface to self host or create CI pipelines.",source:"@site/docs/cli.md",sourceDirName:".",slug:"/cli",permalink:"/documentation/cli",draft:!1,editUrl:"https://github.com/wcat-org/wcat-scanner-docs/edit/main/docs/cli.md",tags:[],version:"current",frontMatter:{description:"Learn how to use the Command Line Interface to self host or create CI pipelines.",id:"cli",title:"Command Line Options",sidebar_label:"CLI"},sidebar:"someSidebar",previous:{title:"Welcome",permalink:"/documentation/"},next:{title:"CI",permalink:"/documentation/ci"}},l={},u=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Ubuntu",id:"ubuntu",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"CLI Commands",id:"cli-commands",level:2},{value:"Quick Start",id:"quick-start",level:3},{value:"Code Fix",id:"code-fix",level:4}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/wcat/a11ywatch/tree/main/cli"},"View Repo")),(0,a.kt)("p",null,"The WCAT-Scanner CLI is an easy way to get started with running, deploying, and testing web accessibility."),(0,a.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.rust-lang.org/tools/install"},"Rust")," is required."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker")," is required if you are not building locally."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"Nodejs")," is required for local installs.")),(0,a.kt)("h3",{id:"ubuntu"},"Ubuntu"),(0,a.kt)("p",null,"If you are on Ubuntu OpenSSL is required:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"apt-get update && apt upgrade -y && apt-get install -y --no-install-recommends build-essential gcc cmake libc6 libssl-dev pkg-config\n")),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"You can get the CLI using ",(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/commands/cargo-install.html"},(0,a.kt)("inlineCode",{parentName:"a"},"cargo"))," or ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/en/download/"},"npm"),"."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"cargo install wcat_cli"),"\nor"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"npm i wcat-cli -g"))),(0,a.kt)("h2",{id:"cli-commands"},"CLI Commands"),(0,a.kt)("p",null,"You can run the ",(0,a.kt)("inlineCode",{parentName:"p"},"wcat -h")," command to get all the options and details for the CLI."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"wcat_cli 0.8.23\nj-mendez <jeff@wcat.dev>\nWCAT-Scanner web accessibility CLI.\n\nUSAGE:\n    wcat [OPTIONS] [SUBCOMMAND]\n\nOPTIONS:\n    -f, --find-results\n            Log file results path\n\n        --find-tmp-dir\n            Get the apps tmp directory location\n\n    -g, --github-api-url\n            Get github API endpoint of project\n\n        --github-results-path\n            Log file results github path\n\n    -h, --help\n            Print help information\n\n    -r, --results-parsed\n            Get results file parsed to json\n\n    -r, --results-parsed-list\n            Get results file parsed as report list of passed / failed\n\n        --results-issues\n            Get the total amount of issues between errors,warning,notice that occurred for the\n            result set\n\n        --results-issues-errors\n            Get the total amount of issues of type error from result set\n\n        --results-issues-warnings\n            Get the total amount of issues of type warning from result set\n\n        --results-parsed-github\n            Get results of the github html message\n\n    -s, --set-token <SET_TOKEN>\n            Set the API token to use for request\n\n        --set-cv-token <SET_CV_TOKEN>\n            Set the Computer Vision API token to use for request\n\n        --set-cv-url <SET_CV_URL>\n            Set the Computer Vision API endpoint to use for request\n\n    -V, --version\n            Print version information\n\nSUBCOMMANDS:\n    build      Build the project on the local machine [defaults to docker runtime]\n    crawl      Site wide scan a website url for issues\n    extract    Extract results in formats for platforms\n    help       Print this message or the help of the given subcommand(s)\n    scan       Single page scan a website url for issues\n    start      Start the application on the local machine [defaults to docker runtime]\n    stop       Stop the project on the local machine [defaults to docker runtime]\n")),(0,a.kt)("h3",{id:"quick-start"},"Quick Start"),(0,a.kt)("p",null,"To get started scanning your website with the CLI run the following commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# pass -f option to start with the front-end\nwcat start\n# single page scan and store results\nwcat scan --url https://wcat.dev -s\n# full multi site crawl\nwcat crawl --url https://wcat.dev -s -d\n# full site wide crawl with subdomains and TLDS\nwcat crawl --url https://wcat.dev -s -d --subdomains --tld\n")),(0,a.kt)("p",null,"If you want to display detailed reports on the last scan run ",(0,a.kt)("inlineCode",{parentName:"p"},"wcat --results-parsed-list"),", the prior run also needs the ",(0,a.kt)("inlineCode",{parentName:"p"},"-s")," flag to store results. This will bring up the last scan with pass/fail reports for each page."),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"-d")," flag in order to enable real time log output of pages completed."),(0,a.kt)("h4",{id:"code-fix"},"Code Fix"),(0,a.kt)("p",null,"The command line gives you the ability to get code fixes right into your project after a scan using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--fix")," flag."),(0,a.kt)("p",null,"Run the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"wcat crawl --url https://wcat.dev -s -d --fix\n")))}p.isMDXComponent=!0}}]);